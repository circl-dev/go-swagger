// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/protodev-site/validate"
)

// HotspotType hotspot type
//
// swagger:model HotspotType
type HotspotType string

func NewHotspotType(value HotspotType) *HotspotType {
	v := value
	return &v
}

const (

	// HotspotTypeA captures enum value "A"
	HotspotTypeA HotspotType = "A"

	// HotspotTypeB captures enum value "B"
	HotspotTypeB HotspotType = "B"

	// HotspotTypeC captures enum value "C"
	HotspotTypeC HotspotType = "C"
)

// for schema
var hotspotTypeEnum []interface{}

func init() {
	var res []HotspotType
	if err := json.Unmarshal([]byte(`["A","B","C"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hotspotTypeEnum = append(hotspotTypeEnum, v)
	}
}

func (m HotspotType) validateHotspotTypeEnum(path, location string, value HotspotType) error {
	if err := validate.EnumCase(path, location, value, hotspotTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hotspot type
func (m HotspotType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHotspotTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hotspot type based on context it is used
func (m HotspotType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JSONObjectWithAlias JSON object with alias
//
// swagger:model JSONObjectWithAlias
type JSONObjectWithAlias map[string]JSONObjectWithAliasAnon

// Validate validates this JSON object with alias
func (m JSONObjectWithAlias) Validate(formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if swag.IsZero(m[k]) { // not required
			continue
		}
		if val, ok := m[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this JSON object with alias based on the context it is used
func (m JSONObjectWithAlias) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for k := range m {

		if val, ok := m[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// JSONObjectWithAliasAnon JSON object with alias anon
//
// swagger:model JSONObjectWithAliasAnon
type JSONObjectWithAliasAnon struct {

	// message
	Message JSONMessage `json:"message,omitempty"`
}

// Validate validates this JSON object with alias anon
func (m *JSONObjectWithAliasAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONObjectWithAliasAnon) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := m.Message.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("message")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("message")
		}
		return err
	}

	return nil
}

// ContextValidate validate this JSON object with alias anon based on the context it is used
func (m *JSONObjectWithAliasAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JSONObjectWithAliasAnon) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Message.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("message")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("message")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JSONObjectWithAliasAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JSONObjectWithAliasAnon) UnmarshalBinary(b []byte) error {
	var res JSONObjectWithAliasAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccessPoint access point
//
// swagger:model AccessPoint
type AccessPoint struct {

	// f b ID
	FBID uint64 `json:"FBID,omitempty" gorm:"index"`

	// created at
	// Format: date-time
	CreatedAt *Time `json:"created_at,omitempty"`

	// id
	ID uint64 `json:"id,omitempty" gorm:"primary_key"`

	// updated at
	// Format: date-time
	UpdatedAt *Time `json:"updated_at,omitempty"`

	// version
	Version uint64 `json:"version,omitempty"`

	// hotspot
	Hotspot *Hotspot `json:"hotspot,omitempty"`

	// hotspot id
	HotspotID uint64 `json:"hotspot_id,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty" gorm:"index;not null;unique"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AccessPoint) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		FBID uint64 `json:"FBID,omitempty"`

		CreatedAt *Time `json:"created_at,omitempty"`

		ID uint64 `json:"id,omitempty"`

		UpdatedAt *Time `json:"updated_at,omitempty"`

		Version uint64 `json:"version,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.FBID = dataAO0.FBID

	m.CreatedAt = dataAO0.CreatedAt

	m.ID = dataAO0.ID

	m.UpdatedAt = dataAO0.UpdatedAt

	m.Version = dataAO0.Version

	// AO1
	var dataAO1 struct {
		Hotspot *Hotspot `json:"hotspot,omitempty"`

		HotspotID uint64 `json:"hotspot_id,omitempty"`

		MacAddress string `json:"mac_address,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Hotspot = dataAO1.Hotspot

	m.HotspotID = dataAO1.HotspotID

	m.MacAddress = dataAO1.MacAddress

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AccessPoint) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		FBID uint64 `json:"FBID,omitempty"`

		CreatedAt *Time `json:"created_at,omitempty"`

		ID uint64 `json:"id,omitempty"`

		UpdatedAt *Time `json:"updated_at,omitempty"`

		Version uint64 `json:"version,omitempty"`
	}

	dataAO0.FBID = m.FBID

	dataAO0.CreatedAt = m.CreatedAt

	dataAO0.ID = m.ID

	dataAO0.UpdatedAt = m.UpdatedAt

	dataAO0.Version = m.Version

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Hotspot *Hotspot `json:"hotspot,omitempty"`

		HotspotID uint64 `json:"hotspot_id,omitempty"`

		MacAddress string `json:"mac_address,omitempty"`
	}

	dataAO1.Hotspot = m.Hotspot

	dataAO1.HotspotID = m.HotspotID

	dataAO1.MacAddress = m.MacAddress

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this access point
func (m *AccessPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHotspot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessPoint) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) validateHotspot(formats strfmt.Registry) error {

	if swag.IsZero(m.Hotspot) { // not required
		return nil
	}

	if m.Hotspot != nil {
		if err := m.Hotspot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hotspot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hotspot")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access point based on the context it is used
func (m *AccessPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHotspot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessPoint) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {
		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) contextValidateHotspot(ctx context.Context, formats strfmt.Registry) error {

	if m.Hotspot != nil {
		if err := m.Hotspot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hotspot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hotspot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessPoint) UnmarshalBinary(b []byte) error {
	var res AccessPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Base base
//
// swagger:model Base
type Base struct {

	// f b ID
	FBID uint64 `json:"FBID,omitempty" gorm:"index"`

	// created at
	// Format: date-time
	CreatedAt *Time `json:"created_at,omitempty"`

	// id
	ID uint64 `json:"id,omitempty" gorm:"primary_key"`

	// updated at
	// Format: date-time
	UpdatedAt *Time `json:"updated_at,omitempty"`

	// version
	Version uint64 `json:"version,omitempty"`
}

// Validate validates this base
func (m *Base) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Base) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *Base) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this base based on the context it is used
func (m *Base) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Base) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedAt != nil {
		if err := m.CreatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("created_at")
			}
			return err
		}
	}

	return nil
}

func (m *Base) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updated_at")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updated_at")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Base) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Base) UnmarshalBinary(b []byte) error {
	var res Base
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

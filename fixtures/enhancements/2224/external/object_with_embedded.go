// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectWithEmbedded object with embedded
//
// swagger:model ObjectWithEmbedded
type ObjectWithEmbedded struct {

	// a
	// Format: date-time
	A *Time `json:"a,omitempty"`

	// b
	B Request `json:"b,omitempty"`

	// c
	// Format: date-time
	C *TimeAsObject `json:"c,omitempty"`

	// d
	D Raw `json:"d,omitempty"`

	// e
	E JSONObject `json:"e,omitempty"`

	// f
	F JSONMessage `json:"f,omitempty"`

	// g
	G JSONObjectWithAlias `json:"g,omitempty"`
}

// Validate validates this object with embedded
func (m *ObjectWithEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateF(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateG(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectWithEmbedded) validateA(formats strfmt.Registry) error {
	if swag.IsZero(m.A) { // not required
		return nil
	}

	if m.A != nil {
		if err := m.A.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectWithEmbedded) validateB(formats strfmt.Registry) error {
	if swag.IsZero(m.B) { // not required
		return nil
	}

	if err := m.B.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("b")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("b")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) validateC(formats strfmt.Registry) error {
	if swag.IsZero(m.C) { // not required
		return nil
	}

	if m.C != nil {
		if err := m.C.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("c")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectWithEmbedded) validateD(formats strfmt.Registry) error {
	if swag.IsZero(m.D) { // not required
		return nil
	}

	if err := m.D.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("d")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("d")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) validateE(formats strfmt.Registry) error {
	if swag.IsZero(m.E) { // not required
		return nil
	}

	if m.E != nil {
		if err := m.E.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("e")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("e")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectWithEmbedded) validateF(formats strfmt.Registry) error {
	if swag.IsZero(m.F) { // not required
		return nil
	}

	if err := m.F.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("f")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("f")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) validateG(formats strfmt.Registry) error {
	if swag.IsZero(m.G) { // not required
		return nil
	}

	if m.G != nil {
		if err := m.G.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("g")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("g")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object with embedded based on the context it is used
func (m *ObjectWithEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateD(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateF(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateG(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectWithEmbedded) contextValidateA(ctx context.Context, formats strfmt.Registry) error {

	if m.A != nil {
		if err := m.A.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateB(ctx context.Context, formats strfmt.Registry) error {

	if err := m.B.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("b")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("b")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateC(ctx context.Context, formats strfmt.Registry) error {

	if m.C != nil {
		if err := m.C.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("c")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateD(ctx context.Context, formats strfmt.Registry) error {

	if err := m.D.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("d")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("d")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateE(ctx context.Context, formats strfmt.Registry) error {

	if err := m.E.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("e")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("e")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateF(ctx context.Context, formats strfmt.Registry) error {

	if err := m.F.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("f")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("f")
		}
		return err
	}

	return nil
}

func (m *ObjectWithEmbedded) contextValidateG(ctx context.Context, formats strfmt.Registry) error {

	if err := m.G.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("g")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("g")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectWithEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectWithEmbedded) UnmarshalBinary(b []byte) error {
	var res ObjectWithEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
